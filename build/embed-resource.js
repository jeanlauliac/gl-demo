#!/usr/bin/env node

'use strict';

const fs = require('fs');
const path = require('path');

const resourceFilePath = process.argv[3];
const content = fs.readFileSync(resourceFilePath);
const name = path.basename(resourceFilePath).replace('.', '_').toUpperCase();
const topDir = path.resolve(__dirname, '..');
const namespaces = path.dirname(path.relative(
  topDir,
  resourceFilePath
)).split(path.sep);
const sourceFilePath = process.argv[2];
const fd = fs.openSync(sourceFilePath, 'w');
try {
  fs.writeSync(fd, `// THIS FILE IS AUTOGENERATED, DO NOT MODIFY\n`);
  const resourceHeaderPath = path.relative(
    path.dirname(sourceFilePath),
    path.resolve(__dirname, '../ds/Resource.h')
  );
  fs.writeSync(fd, `#include "${resourceHeaderPath}"\n\n`);
  for (let i = 0; i < namespaces.length; ++i) {
    fs.writeSync(fd, `namespace ${namespaces[i]} {\n`);
  }
  fs.writeSync(fd, `\nstatic unsigned char data[] = {\n  `)
  let first = true;
  for (let i = 0; i <= content.length; ++i) {
    if (!first) {
      fs.writeSync(fd, i % 16 === 0 ? ',\n  ' : ', ');
    }
    if (i < content.length) {
      fs.writeSync(fd, '0x' + content[i].toString(16));
    } else {
      fs.writeSync(fd, '0');
    }
    first = false;
  }
  fs.writeSync(fd, `\n};\n`);
  fs.writeSync(fd, `\nextern const ds::Resource ${name} = {\n`);
  const relResourceFilePath = path.relative(topDir, resourceFilePath);
  fs.writeSync(fd, `  .filePath = "${relResourceFilePath}",\n`);
  fs.writeSync(fd, `  .data = data,\n`);
  fs.writeSync(fd, `  .size = sizeof(data) - 1\n};`);
  fs.writeSync(fd, `\n\n${namespaces.map(() => '}\n').join('')}`);
} finally {
  fs.closeSync(fd);
}
