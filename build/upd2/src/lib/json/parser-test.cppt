#include "../string_char_reader.h"
#include "lexer-test.h"
#include "parser.h"

using namespace upd;

typedef json::lexer<string_char_reader> string_lexer;
typedef json::object_reader<string_lexer> object_reader;

struct expect_empty_object_handler {
  bool object(object_reader& read_object) const {
    bool good = true;
    read_object([&good](){ good = false; });
    return good;
  }
  bool string_literal(const std::string&) const { return false; }
  bool number_literal(float) const { return false; }
};

template <typename Lexer, typename Handler>
bool parse_expression_as_bool(Lexer& lexer, const Handler& handler) {
  return json::parse_expression<Lexer, const Handler, bool>(lexer, handler);
}

@case "parses empty object" {
  string_char_reader reader("{}");
  string_lexer lx(reader);
  @expect(parse_expression_as_bool(lx, expect_empty_object_handler()));
  @expect(json::next(lx, expect_end_handler()));
}
